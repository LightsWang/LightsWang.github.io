(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{576:function(t,a,i){"use strict";i.r(a);var s=i(2),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"git-常用命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[t._v("#")]),t._v(" git 常用命令")]),t._v(" "),i("h3",{attrs:{id:"git-config"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[t._v("#")]),t._v(" git config")]),t._v(" "),i("ul",[i("li",[t._v("用法：git config –global user.name “[name]”")]),t._v(" "),i("li",[t._v("用法：git config –global user.email “[email address]”\n该命令将分别设置提交代码的用户名和电子邮件地址。")])]),t._v(" "),i("h3",{attrs:{id:"git-init"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-init"}},[t._v("#")]),t._v(" git init")]),t._v(" "),i("ul",[i("li",[t._v("用法：git init [repository name]\n该命令可用于创建一个新的代码库。")])]),t._v(" "),i("h3",{attrs:{id:"git-clone"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-clone"}},[t._v("#")]),t._v(" git clone")]),t._v(" "),i("ul",[i("li",[t._v("用法：git clone [url]\n该命令可用于通过指定的URL获取一个代码库。")])]),t._v(" "),i("h3",{attrs:{id:"git-add"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),i("ul",[i("li",[t._v("用法：git add [file]\n该命令可以将一个文件添加至stage(暂存区)。")]),t._v(" "),i("li",[t._v("用法：git add *\n该命令可以将多个文件添加至stage(暂存区)。")])]),t._v(" "),i("h3",{attrs:{id:"git-commit"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),i("ul",[i("li",[t._v("用法：git commit -m “[ Type in the commit message]”\n该命令可以在版本历史记录中永久记录文件。")])]),t._v(" "),i("h3",{attrs:{id:"git-diff"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" git diff")]),t._v(" "),i("ul",[i("li",[t._v("用法：git diff\n该命令可以显示尚未添加到stage的文件的变更。")]),t._v(" "),i("li",[t._v("用法：git diff –staged\n该命令可以显示添加到stage的文件与当前最新版本之间的差异。")]),t._v(" "),i("li",[t._v("用法：git diff [first branch] [second branch]\n该命令可以显示两个分支之间的差异。")])]),t._v(" "),i("h3",{attrs:{id:"git-reset"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),i("ul",[i("li",[t._v("用法：git reset [file]\n该命令将从stage中撤出指定的文件，但可以保留文件的内容。")]),t._v(" "),i("li",[t._v("用法：git reset [commit]\n该命令可以撤销指定提交之后的所有提交，并在本地保留变更。")]),t._v(" "),i("li",[t._v("用法：git reset –hard [commit]\n该命令将丢弃所有的历史记录，并回滚到指定的提交。")])]),t._v(" "),i("h3",{attrs:{id:"git-status"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[t._v("#")]),t._v(" git status")]),t._v(" "),i("ul",[i("li",[t._v("用法：git status\n该命令将显示所有需要提交的文件。")])]),t._v(" "),i("h3",{attrs:{id:"git-rm"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-rm"}},[t._v("#")]),t._v(" git rm")]),t._v(" "),i("ul",[i("li",[t._v("用法：git rm [file]\n该命令将删除工作目录中的文件，并将删除动作添加到stage。")])]),t._v(" "),i("h3",{attrs:{id:"git-log"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),i("ul",[i("li",[t._v("用法：git log\n该命令可用于显示当前分支的版本历史记录。")]),t._v(" "),i("li",[t._v("用法：git log –follow[file]\n该命令可用于显示某个文件的版本历史记录，包括文件的重命名。")])]),t._v(" "),i("h3",{attrs:{id:"git-show"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-show"}},[t._v("#")]),t._v(" git show")]),t._v(" "),i("ul",[i("li",[t._v("用法：git show [commit]\n该命令经显示指定提交的元数据以及内容变更。")])]),t._v(" "),i("h3",{attrs:{id:"git-tag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" git tag")]),t._v(" "),i("ul",[i("li",[t._v("用法：git tag [commitID]\n该命令可以给指定的提交添加标签。")])]),t._v(" "),i("h3",{attrs:{id:"git-branch"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),i("p",[t._v("该命令将显示当前代码库中所有的本地分支。")]),t._v(" "),i("ul",[i("li",[t._v("用法：git branch [branch name]\n该命令将创建一个分支。")]),t._v(" "),i("li",[t._v("用法：git branch -d [branch name]\n该命令将删除指定的分支。")])]),t._v(" "),i("h3",{attrs:{id:"git-checkout"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),i("ul",[i("li",[t._v("用法：git checkout [branch name]\n你可以通过该命令切换分支。")]),t._v(" "),i("li",[t._v("用法：git checkout -b [branch name]\n你可以通过该命令创建一个分支，并切换到新分支上。")])]),t._v(" "),i("h3",{attrs:{id:"git-merge"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),i("ul",[i("li",[t._v("用法：git merge [branch name]\n该命令可以将指定分支的历史记录合并到当前分支。")])]),t._v(" "),i("h3",{attrs:{id:"git-remote"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-remote"}},[t._v("#")]),t._v(" git remote")]),t._v(" "),i("ul",[i("li",[t._v("用法：git remote add [variable name] [Remote Server Link]\n你可以通过该命令将本地的代码库连接到远程服务器。")])]),t._v(" "),i("h3",{attrs:{id:"git-push"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),i("ul",[i("li",[t._v("用法：git push [variable name] master\n该命令可以将主分支上提交的变更发送到远程代码库。")]),t._v(" "),i("li",[t._v("用法：git push [variable name] [branch]\n该命令可以将指定分支上的提交发送到远程代码库。")]),t._v(" "),i("li",[t._v("用法：git push –all [variable name]\n该命令可以将所有分支发送到远程代码库。")]),t._v(" "),i("li",[t._v("用法：git push [variable name] :[branch name]\n该命令可以删除远程代码库上的一个分支。")])]),t._v(" "),i("h3",{attrs:{id:"git-pull"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),i("ul",[i("li",[t._v("用法：git pull [Repository Link]\n该命令将获取远程服务器上的变更，并合并到你的工作目录。")])]),t._v(" "),i("h3",{attrs:{id:"git-stash"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),i("ul",[i("li",[t._v("用法：git stash save\n该命令将临时保存所有修改的文件。")]),t._v(" "),i("li",[t._v("用法：git stash pop\n该命令将恢复最近一次stash（储藏）的文件。")]),t._v(" "),i("li",[t._v("用法：git stash list\n该命令将显示stash的所有变更。")]),t._v(" "),i("li",[t._v("用法：git stash drop\n该命令将丢弃最近一次stash的变更。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);